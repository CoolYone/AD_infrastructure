#Check 


#Password complex
function checkpwcplx ($passwordString){  
    $pwComplexity = 0  
      
    # checking the minimal length, if it's shorter, no need to continue  
    if($passwordString.length -lt 10){  
       return "length <10"  
    }  
   
    # lowercase  
    if($passwordString -cmatch "[a-z]"){  
       $pwComplexity++  
    }  
   
    # uppercase  
    if($passwordString -cmatch "[A-Z]"){  
       $pwComplexity++  
    }  
   
    # digits  
    if($passwordString -cmatch "[0-9]"){  
       $pwComplexity++  
    }  
   
   
    # special character (not alphabetic characters or numbers)  
    if($passwordString -cmatch "[^a-zA-Z0-9]"){  
       $pwComplexity++  
    }  
   
    # if 3 of the criterias      
    if($pwComplexity -ge 3){  
       return "complex"  
    }  
    else{  
       return "NOT complex"  
    }  
 }  
#Auto start script after restart 
function Set-RunOnce
{
    [CmdletBinding()]
    param
    (
        #The Name of the Registry Key in the Autorun-Key.
        [string]
        $KeyName = 'Run',

        #Command to run
        [string]
        $Command = '%systemroot%\System32\WindowsPowerShell\v1.0\powershell.exe -executionpolicy bypass -file c:\Scripts\run1.ps1'
  
    ) 

    
    if (-not ((Get-Item -Path HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce).$KeyName ))
    {
        New-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce' -Name $KeyName -Value $Command -PropertyType ExpandString -ErrorAction Ignore
    }
    else
    {
        Set-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce' -Name $KeyName -Value $Command -PropertyType ExpandString -ErrorAction Ignore
    }
 
   
}


$item_ar = Get-ChildItem -Path c:\* -Recurse | ?{$_.name -like "Ren-rest-ins.ps1"} | select -First 1 | select name 

[string]$comm_v = '%systemroot%\System32\WindowsPowerShell\v1.0\powershell.exe -executionpolicy bypass -file c:\Scripts\'+ $item_ar.Name

Set-RunOnce -KeyName 'Run' -Command $comm_v

#Remove script autorun 
function Remove-RunOnce
{
    [CmdletBinding()]
    param
    (
        #The Name of the Registry Key in the Autorun-Key.
        [string]
        $KeyName = 'Run'

    ) 

        Get-Item -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce' | Remove-ItemProperty -Name $KeyName
    }
   


#Remove files 
function remove-data 
{

Remove-Item -Path "$env:TEMP\*" -Recurse

}
                           

$item_ar = Get-ChildItem -Path c:\* -Recurse | ?{$_.name -like "Ren-rest-ins.ps1"} | select -First 1 | select name 

[string]$comm_v = '%systemroot%\System32\WindowsPowerShell\v1.0\powershell.exe -executionpolicy bypass -file c:\Scripts\'+ $item_ar.Name

Set-RunOnce -KeyName 'Run' -Command $comm_v


#Create a Stopwatch
$stopWatch = New-Object -TypeName System.Diagnostics.Stopwatch

workflow rename 
{

Param (

    [string]$newname,

    [string]$server_name,

    [string]$domname,

    [SecureString]$sadp,

    [SecureString]$Secure2,

    [string]$netname

  )
 

               inlinescript{
                            $server_name =  Get-Content -Path "$env:TMP\servername.json" | ConvertFrom-Json

                            Rename-Computer -NewName $server_name -Force -PassThru
                            }

                            Restart-Computer -Wait

               inlinescript{
                            #$SecurePassword = Get-Content -Path "$env:TMP\Password.txt"| ConvertTo-SecureString

                            #Intall Active Directory Domain service role 

                            net user Administrator /passwordreq:yes

                            Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools -IncludeAllSubFeature
                            }
                          
                            Restart-Computer -Wait

               inlinescript {
                            $SecurePassword = Get-Content -Path "$env:TMP\Password.txt"| ConvertTo-SecureString

                                             $domname =  Get-Content -Path "$env:TMP\Dom_name.json" | ConvertFrom-Json

                                                      $netname = Get-Content -Path "$env:TMP\netbios.json" | ConvertFrom-Json
        
                            
                            New-Item -ItemType "file" -Path "$env:TEMP\InstADF.ps1" -Value '$SecurePassword = Get-Content -Path $env:TMP\Password.txt | ConvertTo-SecureString ; $domname = Get-Content -Path $env:TMP\Dom_name.json | ConvertFrom-Json ; $netname = Get-Content -Path $env:TMP\netbios.json | ConvertFrom-Json ; Install-ADDSForest -CreateDnsDelegation:$false -DatabasePath C:\Windows\NTDS -DomainMode Default -DomainName $domname -DomainNetbiosName $netname -ForestMode Default -InstallDns:$true -LogPath C:\Windows\NTDS -NoRebootOnCompletion:$false -SafeModeAdministratorPassword $SecurePassword -SysvolPath C:\Windows\SYSVOL -Force:$true'

                            }

               inlinescript {

                            powershell.exe -file "$env:TEMP\InstADF.ps1"

                            }

                           }
                           


                          
 $item1 = Get-item -Path "$env:TMP\Password.txt" -ErrorAction Ignore | select name 
                      
if($item1 -eq $null)
{



    Write-host "Would you like enter prerequesite value (Default is No)" -ForegroundColor Yellow 
         $Readhost = Read-Host " ( y / n ) " 
             Switch ($ReadHost) 
                { 
                   Y {Write-host "Yes"; $dom_prom=$true} 
                   N {Write-Host "No, cancel"; $dom_prom=$false} 
                   Default {Write-Host "Default"; $dom_prom=$false} 
                }
     }
     
      if($dom_prom -eq $true)
     {

        $dom_name_1 = Read-Host "Enter domain name, for exampl:'contoso.com'"

        $net_bios = Read-Host "Enter netbios name, for exampl:contoso"

        $server_name = Read-Host "New server name, for exampl:dc1"

        $PlainPassword = Read-Host "Enter SafeMode Administrator Password, password should be complex and not less than 10 symbols, and contain symbol:[A-Z], [a-z],[0-9]" 

        $compl_p = checkpwcplx -passwordString $PlainPassword
                    do
                    {
                    Write-Host "Password not complex, please enter complex password"
                        
                        $PlainPassword = Read-Host "Enter SafeMode Administrator Password"
 
                                   $compl_p = checkpwcplx -passwordString $PlainPassword
                    }while($compl_p -ne "complex")
                    



        $SecurePassword = $PlainPassword | ConvertTo-SecureString -AsPlainText -Force
            
            #domain name
             $dom_name2 = $dom_name_1 | ConvertTo-Json | Out-File "$env:TMP\Dom_name.json"
            
                #password
                 $SecurePassword = $PlainPassword | ConvertTo-SecureString -AsPlainText -Force | ConvertFrom-SecureString | Out-File "$env:TMP\Password.txt"

                    #server name
                      $server_name1 = $server_name | ConvertTo-Json | Out-File "$env:TMP\servername.json"

                       #netbios name
                        $net_bios2 = $net_bios | ConvertTo-Json | Out-File "$env:TMP\netbios.json"

                        
<#
               $Secure2 = Get-Content -Path "$env:TMP\Password.txt"| ConvertTo-SecureString

            $domname =  Get-Content -Path "$env:TMP\Dom_name.json" | ConvertFrom-Json
         
         $server_name =  Get-Content -Path "$env:TMP\servername.json" | ConvertFrom-Json
         #>
            

         rename -domname $dom_name_1 -newname $server_name

         Start-Sleep -Seconds 15

         Write-Progress -Activity "Restart server" -SecondsRemaining 10

}

$item1 = Get-item -Path "$env:TMP\Password.txt" | select name
                      
if($item1 -ne $null)
{
Write-Host "Credentials already exist"

$dom_prom = $false
}
if($dom_prom -eq $false)
{

Write-host "Would you like promote domain controller (Default is No)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes"; $dom_prom_1=$true} 
       N {Write-Host "No, cancel"; $dom_prom_1=$false} 
       Default {Write-Host "Default"; $dom_prom_1=$false} 
     }
if($dom_prom_1 -eq $false)
             {

Remove-RunOnce -KeyName 'Run'

remove-data

sleep 3

break

}

if($dom_prom_1 -eq $true)
{


$job = Get-Job -State Suspended 

                                               if($job.state -like "Suspended")
                                                             {

Write-host "Would you like proceed job (Default is No)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, Restart server"; $job_r=$true} 
       N {Write-Host "No, cancel"; $job_r=$false} 
       Default {Write-Host "Default"; $job_r=$false} 

       
     }
     Resume-Job -State Suspended
     sleep -Seconds 2
     $stopWatch.Start()
 do
{

$rez = Get-Job -Command rename | ?{$_.State -like "Running"}

[string]$rez_l = $rez.state


Write-Progress -Activity "Job in progress" -Status "Status: $rez_l" -SecondsRemaining ($stopWatch.ElapsedMilliseconds / 1000)

}while($rez_l -eq "Running")

$stopWatch.Stop()

     }
                             if($job.state -eq $null)
                                       {
     if($job_r -eq $true)
     {

Resume-Job -State Suspended

sleep -Seconds 2

$job_stat = Get-Job -State Running

}
if($job_stat.State -eq $null)
{

Write-host "Job not runned, would you like create job (Default is No)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes"; $job_stat_1=$true} 
       N {Write-Host "No, cancel"; $job_stat_1=$false} 
       Default {Write-Host "Default"; $job_stat_1=$false} 
     }
            if($job_stat_1 -eq $true)
                    {

                    $dom_name_1 = Read-Host "Enter domain name"

                                $server_name = Read-Host "New server name"

                                            

         #domain nam
             $dom_name2 = $dom_name_1 | ConvertTo-Json | Out-File "$env:TMP\Dom_name.json"
            
                

                    #server name
                      $server_name1 = $server_name | ConvertTo-Json | Out-File "$env:TMP\servername.json"

                        rename -server_name $server_name -domname $server_name


                        $stopWatch.Start()
 do
{

$rez = Get-Job -Command rename | ?{$_.State -like "Running"}

[string]$rez_l = $rez.state


Write-Progress -Activity "Job in progress" -Status "Status: $rez_l" -SecondsRemaining ($stopWatch.ElapsedMilliseconds / 1000)

}while($rez_l -eq "Running")

$stopWatch.Stop()


                    }

}

}       
   
}
}
